/***************************************************************************
*               Generated by StarUML(tm) C++ Add-In                        *
***************************************************************************/
/***************************************************************************
*                                                                          *
*           Institute of Industrial and Control Engineering                *
*                 Technical University of Catalunya                        *
*                        Barcelona, Spain                                  *
*                                                                          *
*                Project Name:       Kautham Planner                       *
*                                                                          *
*     Copyright (C) 2007 - 2009 by Alexander Pérez and Jan Rosell          *
*            alexander.perez@upc.edu and jan.rosell@upc.edu                *
*                                                                          *
*             This is a motion planning tool to be used into               *
*             academic environment and it's provided without               *
*                     any warranty by the authors.                         *
*                                                                          *
*          Alexander Pérez is also with the Escuela Colombiana             *
*          de Ingeniería "Julio Garavito" placed in Bogotá D.C.            *
*             Colombia.  alexander.perez@escuelaing.edu.co                 *
*                                                                          *
***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
 
 

#include <libproblem/workspace.h>
#include <libsampling/sampling.h>
#include "localplanner.h"
#include "obstaclesPRMplanner.h"

using namespace libSampling;

namespace libPlanner {
  namespace PRM{
   namespace ObstaclesPRM{
	//! Constructor
    ObstaclesPRMPlanner::ObstaclesPRMPlanner(SPACETYPE stype, Sample *init, Sample *goal, SampleSet *samples, Sampler *sampler, WorkSpace *ws, LocalPlanner *lcPlan, KthReal ssize):
              PRMPlanner(stype, init, goal, samples, sampler, ws, lcPlan, ssize)
	{
      _guiName = _idName = "PRM";
            _neighThress = 1.5;//0.5//50000.0;
            _kNeighs = 10;
            _isGraphSet = false;
                _maxNumSamples = 200;//1000;
                _speedFactor = 1;
                _solved = false;
                setStepSize(ssize);//also changes stpssize of localplanner
            _drawnLink = -1; //the path of last link is defaulted
                _probabilityConnectionIniGoal = 0.1;

            addParameter("Step Size", ssize);
            addParameter("Neigh Thresshold", _neighThress);
            addParameter("Max. Neighs", _kNeighs);
            addParameter("Max. Samples", _maxNumSamples);
            addParameter("Speed Factor", _speedFactor);
            addParameter("Drawn Path Link",_drawnLink);
                addParameter("P(connect to Ini-Goal)",_probabilityConnectionIniGoal);

                  _labelCC=0;

                  _samples->setTypeSearch(ANNMETHOD);//(BRUTEFORCE);//ANNMETHOD
                  _samples->setWorkspacePtr(_wkSpace);
                  _samples->setANNdatastructures(_kNeighs, _maxNumSamples);

            for(int i=0; i<_wkSpace->robotsCount();i++)
              _wkSpace->getRobot(i)->setLinkPathDrawn(_drawnLink);

    }

	//! void destructor
	ObstaclesPRMPlanner::~ObstaclesPRMPlanner(){
			
	}
	
	//! setParameters sets the parameters of the planner
    bool ObstaclesPRMPlanner::setParameters(){
      try{
              HASH_S_K::iterator it = _parameters.find("Step Size");
              if(it != _parameters.end())
                                  setStepSize(it->second);//also changes stpssize of localplanner
              else
                return false;

              it = _parameters.find("Speed Factor");
              if(it != _parameters.end())
                _speedFactor = it->second;
              else
                return false;

                       it = _parameters.find("P(connect to Ini-Goal)");
              if(it != _parameters.end())
                _probabilityConnectionIniGoal = it->second;
              else
                return false;

              it = _parameters.find("Drawn Path Link");
                      if(it != _parameters.end()){
                _drawnLink = it->second;
                for(int i=0; i<_wkSpace->robotsCount();i++)
                  _wkSpace->getRobot(i)->setLinkPathDrawn(_drawnLink);
                      }else
                return false;

              it = _parameters.find("Max. Samples");
              if(it != _parameters.end()){
                _maxNumSamples = it->second;
                            _samples->setANNdatastructures(_kNeighs, _maxNumSamples);
                                _samples->loadAnnData();
                          }else
                return false;

              it = _parameters.find("Neigh Thresshold");
              if(it != _parameters.end())
                _neighThress = it->second;
              else
                return false;

              it = _parameters.find("Max. Neighs");
              if(it != _parameters.end()){
                _kNeighs = (int)it->second;
                           _samples->setANNdatastructures(_kNeighs, _maxNumSamples);
                               _samples->loadAnnData();
                          }else
                return false;
            }catch(...){
              return false;
            }
            return true;
    }

	
  	
	//! function to find a solution path
		bool ObstaclesPRMPlanner::trySolve()
		{
			cout << "MyPRMPlanner::trySolve - now a call to PRMPlanner::trySolve()..."<<endl<<flush;
			cout << "A bettter alternative is expected to be implemented here..."<<endl<<flush;

			return PRMPlanner::trySolve();

			/*
			The available resorces to implement your planner are:
			1) A sampler to obtain samples:
					Sample *smp;
					smp = _sampler->nextSample();
			   or a way to determine new sample at a given configuration, e.g.:
					Sample *smp = new Sample();
					KthReal* coords = new KthReal[_wkSpace->getDimension()];
					for(int k = 0; k < _wkSpace->getDimension(); k++) coords[k] = 0.0;
					smp->setCoords(coords);

			2) A collision-checker to check for collision at a given sample smp:
					_wkSpace->collisionCheck(smp)

			3) A local planner to connect two samples
					_locPlanner->canConect();

			The solution must be specified as a sequence of samples (vector _path)
		  	*/

		}
	  }
    }
}


