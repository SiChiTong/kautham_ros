/***************************************************************************
*               Generated by StarUML(tm) C++ Add-In                        *
***************************************************************************/
/***************************************************************************
*                                                                          *
*           Institute of Industrial and Control Engineering                *
*                 Technical University of Catalunya                        *
*                        Barcelona, Spain                                  *
*                                                                          *
*                Project Name:       Kautham Planner                       *
*                                                                          *
*     Copyright (C) 2007 - 2009 by Alexander Pérez and Jan Rosell          *
*            alexander.perez@upc.edu and jan.rosell@upc.edu                *
*                                                                          *
*             This is a motion planning tool to be used into               *
*             academic environment and it's provided without               *
*                     any warranty by the authors.                         *
*                                                                          *
*          Alexander Pérez is also with the Escuela Colombiana             *
*          de Ingeniería "Julio Garavito" placed in Bogotá D.C.            *
*             Colombia.  alexander.perez@escuelaing.edu.co                 *
*                                                                          *
***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
 

#if !defined(_PRMHANDPLANNERARMHAND_H)
#define _PRMHANDPLANNERARMHAND_H

#include "prmhandplanner.h"


#if defined(KAUTHAM_USE_ARMADILLO)
#include <iostream>
#include <armadillo>

using namespace arma;
using namespace std;


 namespace libPlanner {
  namespace PRM{
      typedef std::pair<KthReal, KthReal> thumbLimits;
	  

	class PRMHandPlannerArmHandPCA:public PRMHandPlanner{
		public:
			PRMHandPlannerArmHandPCA(SPACETYPE stype, Sample *init, Sample *goal, SampleSet *samples, Sampler *sampler, 
				WorkSpace *ws, LocalPlanner *lcPlan, KthReal ssize, int cloundSize,int samplingV, KthReal cloudRad, int samplingR,float distgoal,float distsamplingpcagoal);
	  
			~PRMHandPlannerArmHandPCA();
      
			bool  setParameters();
			bool  trySolve();
      bool getHandConfig(vector<KthReal>& coord, bool randhand, int numPMDs);
			bool getSampleInGoalRegion(double tradius, double rradius);  
			///////////////////////////////////////////////////////////
			////////////////Process PCA///////////////////////////////
			bool getSampleRandPCA(float R);
			bool SamplerPCASpace(bool spca,float R,float tradius);
			////////////////////////////////////////////////////////
			bool getSampleInGoalRegionRealworld(double tradius, double rradius, bool handWholeRange);
			//////////////////////////////////////////////////////////
			void printPCAComponents();
			//////////////////////////////////////////////////////////
    bool  getSampleInRegion(SE3Conf  *smpse3, double tradius, double rradius);
			void saveData();//reimplemented
      void writeFiles(FILE *fpr, FILE *fph, RobConf* joints);

	bool ArmInverseKinematics(vector<KthReal> &carm, Sample *smp, bool maintainSameWrist=true);
 	void setIniGoalSe3();
	 
		private:
			int	_numberHandConf;
			int _incrementalPMDs;
			KthReal _cloudRadiusMax;
			int _exhaustiveCloud;
			int _samplingV;
			int _samplingR;
			SE3Conf _inise3;
			SE3Conf _goalse3;
			///For Process PCA
			vector<float>	_distance;
			vector<int>	_indexpca;
			
			mt::Point3 goaltrans;
			int callpca;
			//int countwr;
			//int n;
			float _distancegoal;
			float _distsamplingpcagoal;
			float distanceig;//distance : ini to goal
			//mat PCA11PMDs;
			mat matPCA;
			bool samplefree;
			//mat matrand;
		

	};	
  }
}
#endif // KAUTHAM_USE_ARMADILLO
 
#endif  //_PRMHANDPLANNERARMHAND_H

