/***************************************************************************
*               Generated by StarUML(tm) C++ Add-In                        *
***************************************************************************/
/***************************************************************************
*                                                                          *
*           Institute of Industrial and Control Engineering                *
*                 Technical University of Catalunya                        *
*                        Barcelona, Spain                                  *
*                                                                          *
*                Project Name:       Kautham Planner                       *
*                                                                          *
*     Copyright (C) 2007 - 2009 by Alexander Pérez and Jan Rosell          *
*            alexander.perez@upc.edu and jan.rosell@upc.edu                *
*                                                                          *
*             This is a motion planning tool to be used into               *
*             academic environment and it's provided without               *
*                     any warranty by the authors.                         *
*                                                                          *
*          Alexander Pérez is also with the Escuela Colombiana             *
*          de Ingeniería "Julio Garavito" placed in Bogotá D.C.            *
*             Colombia.  alexander.perez@escuelaing.edu.co                 *
*                                                                          *
***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
 
 

#if !defined(_SDKSAMPLE_H)
#define _SDKSAMPLE_H


#include <string>
#include <vector>
#include "wmat.h"
#include "lcprng.h"			//class for linear congruential generators
#include "sample.h"

using namespace std;
using namespace libSampling;

namespace SDK {
  //! This class is the abstraction of a sample entity. This class contains the code, the indexes
  //! and the coordinates of a sample and it provides some methods to extract and to use its 
  //! information in the exploration process.
  
	class SDKSample: public Sample {
	public:	
    //! Unique constructor for a class. Indexes parameter is used for neighbours search.
    SDKSample(char d, unsigned long int code, char* indexes, bool random = true); 
	//!copy constructor
	SDKSample(SDKSample *s);

	~SDKSample();

    //! Returns the sample code.
    inline unsigned long int getCode(){return code;}

    //! This method searchs the neighbours of the sample that belong to the vector of candidate 
    //! samples provided that the partition level of the sample is over a given threshold.
    void searchNeighs(std::vector<SDKSample*> *candidates, int threshold);

    //! Returns an iterator to point to neighbours vector of the sample smp. 
    vector<SDKSample*>::iterator getNeighs(SDKSample &smp);

    //! Returns a string containing the coordinates information and if extend parameter is true, 
    //! it contains the code and the coordinates information in a explicit form.
    string	print(bool extend=true);

    //! Returns a string that contais the sample code and the codes of neighbour samples.
    string  printNeighs();
	

    //! This is the size of an M-Cell.
    static float sizeContainer;

    //! This is the grid partition level.
    static char M;

    static LCPRNG* gen;
	private:
    //! Pointer to the grid indexes.
    char* index;

    ////! Standar vector of pointer to neighbour samples.
    //vector<SDKSample*> neighset;

    //! This is the sample code.
		unsigned long int code;
    
	};
}

#endif  //_SDKSAMPLE_H

