/***************************************************************************
*               Generated by StarUML(tm) C++ Add-In                        *
***************************************************************************/
/***************************************************************************
*                                                                          *
*           Institute of Industrial and Control Engineering                *
*                 Technical University of Catalunya                        *
*                        Barcelona, Spain                                  *
*                                                                          *
*                Project Name:       Kautham Planner                       *
*                                                                          *
*     Copyright (C) 2007 - 2009 by Alexander Pérez and Jan Rosell          *
*            alexander.perez@upc.edu and jan.rosell@upc.edu                *
*                                                                          *
*             This is a motion planning tool to be used into               *
*             academic environment and it's provided without               *
*                     any warranty by the authors.                         *
*                                                                          *
*          Alexander Pérez is also with the Escuela Colombiana             *
*          de Ingeniería "Julio Garavito" placed in Bogotá D.C.            *
*             Colombia.  alexander.perez@escuelaing.edu.co                 *
*                                                                          *
***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
 
 

#include "sdksampler.h"

namespace SDK{
  char SDKSample::M=0;
  float SDKSample::sizeContainer=0.0;
  
  SDKSampler::SDKSampler(char dim, char maxLevel){
    generator = new LCPRNG(15485341);//15485341 is a big prime number
    setDim(dim);
    unsigned long int NumSamples = 0x01<<(maxLevel*dim);
    _tMat = new TMat(dim);
    _wMat = new WMat(dim,maxLevel);
    SDKSample::sizeContainer = 1.0f/(0x01<<maxLevel);
    SDKSample::M = maxLevel;
		sdkSequence = new Sequence(dim, maxLevel);
    sdkSequence->setT(*_tMat);
    sdkSequence->setW(*_wMat);
    SDKSample::gen = generator;
  }

  Sample* SDKSampler::nextSample() {
    return nextSample(true);
  }

  Sample* SDKSampler::nextSample(bool random) {
		unsigned long newCode= sdkSequence->getSequenceCode();
		
    if( random )
		  _current = new SDKSample(dimension, newCode,sdkSequence->getIndexes(newCode));
    else
      _current = new SDKSample(dimension, newCode,sdkSequence->getIndexes(newCode),false);

    return _current;
  }

  Sample* SDKSampler::getSample(unsigned long int code, bool random ){
    if( random )
		  _current = new SDKSample(dimension, code,sdkSequence->getIndexes(code));
    else
      _current = new SDKSample(dimension, code,sdkSequence->getIndexes(code),false);
    return (SDKSample*)_current;  
  }

   //! Destructor.
	SDKSampler::~SDKSampler()
	{

	};

}




