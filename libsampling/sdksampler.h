/***************************************************************************
*               Generated by StarUML(tm) C++ Add-In                        *
***************************************************************************/
/***************************************************************************
*                                                                          *
*           Institute of Industrial and Control Engineering                *
*                 Technical University of Catalunya                        *
*                        Barcelona, Spain                                  *
*                                                                          *
*                Project Name:       Kautham Planner                       *
*                                                                          *
*     Copyright (C) 2007 - 2009 by Alexander Pérez and Jan Rosell          *
*            alexander.perez@upc.edu and jan.rosell@upc.edu                *
*                                                                          *
*             This is a motion planning tool to be used into               *
*             academic environment and it's provided without               *
*                     any warranty by the authors.                         *
*                                                                          *
*          Alexander Pérez is also with the Escuela Colombiana             *
*          de Ingeniería "Julio Garavito" placed in Bogotá D.C.            *
*             Colombia.  alexander.perez@escuelaing.edu.co                 *
*                                                                          *
***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
 
 


#if !defined(_SDKSAMPLER_H)
#define _SDKSAMPLER_H

#include "sampler.h"
#include "sequence.h"
#include "lcprng.h"
#include "sdksample.h"
#include "wmat.h"
#include "tmat.h"


namespace SDK{
  class SDKSampler : public Sampler {
  public:
    //! This is the unique constructor. In order to create an SDK sampler
    //! is needed to provide the dimension and the maximum partition level.
    //! Is not possible create an SDKSampler without this information.
    SDKSampler(char dim, char maxLevel);

    //! Destructor.
	~SDKSampler();

    //! Implements the virtual function. \sa Sample. For ommision, the samples
    //! will be created with their coordinates randomly into their respective cell.
    Sample* nextSample();

    //! This is provided for convenience. In the SDK strategy, the samples 
    //! could be created with their coordinates randomly or centered into 
    //! their respective cells.
    Sample* nextSample(bool random);

    //! Overwites the Sample method in order to retrieves a known sample.
    //! Really, this method create a new sample whose code will be the code parameter.
    //! Take care with this method because it could create a new sample 
    //! with the same code as an existing sample
    Sample* getSample(unsigned long int code, bool random = true);
    
    //! Returns a pointer to T matrix.
		TMat* getTMat(){return _tMat;};

    //! Returns a pointer to W matrix.
		WMat* getWMat(){return _wMat;};

    Sequence* getSeqGenerator(){return sdkSequence;};
  private:
    Sequence* sdkSequence;
      //! This is the size of an M-Cell.
    double sizeContainer;

    //! This is the grid partition level.
    char M;

    //! This is a static pointer to the W matrix. This is a unique object used for any sample in sampleset.
    WMat* _wMat;

    //! Pointer to T matrix.
		TMat *_tMat;
        //! Pointer to object that generates a random number sequence.
    LCPRNG* generator;
  };
}

#endif  //_SDKSAMPLER_H
