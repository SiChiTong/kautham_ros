/***************************************************************************
*               Generated by StarUML(tm) C++ Add-In                        *
***************************************************************************/
/***************************************************************************
*                                                                          *
*           Institute of Industrial and Control Engineering                *
*                 Technical University of Catalunya                        *
*                        Barcelona, Spain                                  *
*                                                                          *
*                Project Name:       Kautham Planner                       *
*                                                                          *
*     Copyright (C) 2007 - 2009 by Alexander Pérez and Jan Rosell          *
*            alexander.perez@upc.edu and jan.rosell@upc.edu                *
*                                                                          *
*             This is a motion planning tool to be used into               *
*             academic environment and it's provided without               *
*                     any warranty by the authors.                         *
*                                                                          *
*          Alexander Pérez is also with the Escuela Colombiana             *
*          de Ingeniería "Julio Garavito" placed in Bogotá D.C.            *
*             Colombia.  alexander.perez@escuelaing.edu.co                 *
*                                                                          *
***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
 
 
#if !defined(_TMAT_H)
#define _TMAT_H
#include <string>
using namespace std;

namespace SDK {

  //! This class is the abstraction of the \f$d x d\f$ binary matrix \f$T_{d}\f$ .
  //! This class implements the square (dxd) matrix \f$T_{d}\f$ that is used to find the
  //! sequence of \f$2^{d}\f$ samples of a d-dimensional space that satisfy that the
  //! mutual distance is maximized, i.e. the minimum distance to all the previous
  //! samples of the sequence is maximized.
 
	class  TMat{
	public:
    //! This is a unique constructor.
		TMat(int d=0);
		~TMat();

    //! This method returns a string that contains the text representation of the matrix.
		string printMatrix();

    //! This method multiply the matrix for a constant k.
		int multiply(const int k);

		void multiply(const char* const k, char* const l);
		void multiply(const char* const k, char* const l, const int m);
		void multiply( const char* const w, char* const res ) const ;

    //! This method multiply the matrix for other matrix V that it corresponds to m level and return 
    //! the pointer to the result.
		char** multiply(const char *const *const v, const int m) const ;
	private:
    void prime_factorization(long int x, int *fact, int *numfactors);
    void compose(int *primefactors, int numfactors, char **vC, int dimC, int trunc=0);
    void insert(char **vA, char **vB, int dimA, int dimB);

    //! This method create the matrix properly.
    void createTd();

    //! This is the dimension of the matrix.
		int d;

    //! This is the matrix values.
		char** _tMat;

    //! Pointer to the matrix that contains the results of any multiplication operation.
		char** matRes;
	};
}

#endif  //_TMAT_H

