/***************************************************************************
*               Generated by StarUML(tm) C++ Add-In                        *
***************************************************************************/
/***************************************************************************
*                                                                          *
*           Institute of Industrial and Control Engineering                *
*                 Technical University of Catalunya                        *
*                        Barcelona, Spain                                  *
*                                                                          *
*                Project Name:       Kautham Planner                       *
*                                                                          *
*     Copyright (C) 2007 - 2009 by Alexander Pérez and Jan Rosell          *
*            alexander.perez@upc.edu and jan.rosell@upc.edu                *
*                                                                          *
*             This is a motion planning tool to be used into               *
*             academic environment and it's provided without               *
*                     any warranty by the authors.                         *
*                                                                          *
*          Alexander Pérez is also with the Escuela Colombiana             *
*          de Ingeniería "Julio Garavito" placed in Bogotá D.C.            *
*             Colombia.  alexander.perez@escuelaing.edu.co                 *
*                                                                          *
***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
 
  
 
#if !defined(_APPLICATION_H)
#define _APPLICATION_H

// Class QTROS

#include <QtCore>
#include <libproblem/problem.h>
#include <libgui/gui.h>
#include <Inventor/Qt/SoQt.h>
#include <QtGui>
#include <QFile>
#include <QObject>
#include <libutil/kauthamdefs.h>
#include <string>
#include <libutil/data_ioc_cell.hpp>

#include "libproblem/problem.h"
#include "libplanner/kthquery.h"

#include "trajectory_msgs/JointTrajectory.h"
#include "trajectory_msgs/JointTrajectoryPoint.h"

#include "kautham_ros/ReqPlan.h"
#include "kautham_ros/ReqCollisionCheck.h"
#include "kautham_ros/ReqQuery.h"
#include "kautham_ros/MoveRobots.h"
#include "kautham_ros/Forbidden.h"
#include "kautham_ros/ProblemSetup.h"
#include "kautham_ros/SolveProblem.h"
#include "kautham_ros/AttObj.h"
#include "kautham_ros/DetObj.h"

#include "kautham_ros/SaveData.h"
#include "kautham_ros/LoadData.h"

using namespace std;
using namespace libProblem;
using namespace libGUI;
using namespace Kautham;

#define SDH 0
#define SAH 1

class Application:public QObject{
	Q_OBJECT
public:
        Application();
        ~Application();

        Problem*        _problem;
        Planner*        _planner;
        SampleSet*      _samples;
        unsigned int    _dim;

        unsigned char handType;

        vector<Sample*>* _SolutionPlan;

        vector<trajectory_msgs::JointTrajectoryPoint> _points;
        vector<trajectory_msgs::JointTrajectoryPoint> Trajectory;

        vector< vector< float > > graspPosesSAH_CAN;

        struct graspGoal {
          unsigned goal;
          std::vector< std::vector<float> > graspSmp;
          std::vector<float> distance;
        };

        std::vector< graspGoal > graspInfo;
        graspGoal tmpGrasp;


        struct Solution {
          vector< vector < KthReal > >  SimPath;
          unsigned Goal;
        };

        vector <Solution> SolutionsInfo;

        unsigned      it_path;

        vector<KthReal> init_sample;
        bool LoadedSamples;
        std::string filepath;

        // Services
        // ------------------------------------------------------------------------------
        bool SrvProblemSetup(kautham_ros::ProblemSetup::Request &req,
                             kautham_ros::ProblemSetup::Response &res);

        bool SrvReqPlan(kautham_ros::ReqPlan::Request  &req,
                        kautham_ros::ReqPlan::Response &res);

        //ToDo kautham_ros::ReqCollisionCheck and kautham_ros::MoveRobots are the same type.
        bool SrvCollisionCheck(kautham_ros::ReqCollisionCheck::Request  &req,
                               kautham_ros::ReqCollisionCheck::Response &res);

        bool SrvSolveQuery(kautham_ros::ReqQuery::Request &req,
                           kautham_ros::ReqQuery::Response &res);

        bool SrvMoveRobots(kautham_ros::MoveRobots::Request  &req,
                           kautham_ros::MoveRobots::Response &res);

        bool SrvSetForbidden(kautham_ros::Forbidden::Request  &req,
                             kautham_ros::Forbidden::Response &res);

        bool SrvSolveProblem(kautham_ros::SolveProblem::Request &req,
                             kautham_ros::SolveProblem::Response &res);

        bool SrvAttachObject(kautham_ros::AttObj::Request &req,
                             kautham_ros::AttObj::Response &res);

        bool SrvDetachObject(kautham_ros::DetObj::Request  &req,
                             kautham_ros::DetObj::Response &res);

        bool SrvSaveData(kautham_ros::SaveData::Request  &req,
                                 kautham_ros::SaveData::Response &res);

        bool SrvLoadData(kautham_ros::LoadData::Request  &req,
                                 kautham_ros::LoadData::Response &res);


        // functions
        // ------------------------------------------------------------------------------
        bool solveProblem( std::string path );

        bool solveProblem( unsigned Goal );

        bool solveProblem( unsigned Goal, std::vector<float> Pgoal );

        bool problemSetup(string path);

        bool getTransformation( void );
        bool setObstaclesNames( void );
        bool isGraspableObject( int numObject, std::vector<float> Position, Sample &smp );
        bool testGrasp( unsigned Obstgoal );

        bool ArmInverseKinematics( unsigned int Robot, vector<KthReal> &carm );

        bool fillGraspPosesInfo( void );

public slots:
        void              openFile();
        void              closeProblem();

        void              rosUpdate();

private:
        void              initApp();
        void              setActions();
        QFile*            xmlFile;
        GUI*              mainWindow;
        PROBLEMSTATE      appState;

        QTimer*           timerUpdate;
};

#endif  //_APPLICATION_H
